-- TRIGER PARA PREVENIR EL BORRADO EN REGISTRO PATRONAL

IF EXISTS (SELECT name
	   FROM   sysobjects
	   WHERE  name = 'PATRONAL_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. PATRONAL_DELETE
GO

CREATE TRIGGER PATRONAL_DELETE
ON Supervisor_giro.PATRONAL
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro. SUCURSAL S, DELETED T
       WHERE S. REGISTRO_PATRONAL = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name
	   FROM   sysobjects
	   WHERE  name = 'PATRONAL_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. PATRONAL_UPDATE
GO

CREATE TRIGGER PATRONAL_UPDATE
ON Supervisor_giro.PATRONAL
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.SUCURSAL
      SET SUCURSAL. REGISTRO_PATRONAL = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE SUCURSAL. REGISTRO_PATRONAL = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN SUCURSAL

IF EXISTS (SELECT name
	   FROM   sysobjects
	   WHERE  name = 'SUCURSAL_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. SUCURSAL_DELETE
GO

CREATE TRIGGER SUCURSAL_DELETE
ON Supervisor_giro.SUCURSAL
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPSUC S, DELETED T
       WHERE S. CATALOGO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'SUCURSAL_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. SUCURSAL_UPDATE
GO

CREATE TRIGGER SUCURSAL_UPDATE
ON Supervisor_giro.SUCURSAL
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPSUC
      SET EMPSUC. CATALOGO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPSUC. CATALOGO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN CENTRO DE COSTO

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'CENTROC_DELETE' 
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. CENTROC_DELETE
GO

CREATE TRIGGER CENTROC_DELETE
ON Supervisor_giro.CENTROC
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.DEPTO D, DELETED T
       WHERE D. CENTRO_COSTO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'CENTROC_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. CENTROC_UPDATE
GO

CREATE TRIGGER CENTROC_UPDATE
ON Supervisor_giro.CENTROC
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.DEPTO
      SET DEPTO. CENTRO_COSTO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE DEPTO. CENTRO_COSTO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN DEPTO

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'DEPTO_DELETE' 
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. DEPTO_DELETE
GO

CREATE TRIGGER DEPTO_DELETE
ON Supervisor_giro.DEPTO
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPDEP S, DELETED T
       WHERE S. CATALOGO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'DEPTO_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. DEPTO_UPDATE
GO

CREATE TRIGGER DEPTO_UPDATE
ON Supervisor_giro.DEPTO
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPDEP
      SET EMPDEP. CATALOGO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPDEP. CATALOGO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN TIPO EMPLEADO

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'TIPOEMP_DELETE' 
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. TIPOEMP_DELETE
GO

CREATE TRIGGER TIPOEMP_DELETE
ON Supervisor_giro.TIPOEMP
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.PUESTO P, DELETED T
       WHERE P. TIPO_EMPLEADO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'TIPOEMP_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. TIPOEMP_UPDATE
GO

CREATE TRIGGER TIPOEMP_UPDATE
ON Supervisor_giro.TIPOEMP
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.PUESTO
      SET PUESTO. TIPO_EMPLEADO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE PUESTO. TIPO_EMPLEADO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN CALENDARIO

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'CALENDAR_DELETE' 
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. CALENDAR_DELETE
GO

CREATE TRIGGER CALENDAR_DELETE
ON Supervisor_giro.CALENDAR
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.PUESTO P, DELETED T
       WHERE P. CALENDARIO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPPRIN P, DELETED T
       WHERE P. CALENDARIO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
  DELETE FROM Supervisor_giro.DIASINHA
  FROM DELETED
  WHERE DIASINHA. CLAVE = DELETED. CLAVE
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'CALENDAR_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. CALENDAR_UPDATE
GO

CREATE TRIGGER CALENDAR_UPDATE
ON Supervisor_giro.CALENDAR
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.PUESTO
      SET PUESTO. CALENDARIO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE PUESTO. CALENDARIO = DELETED. CLAVE

      UPDATE Supervisor_giro.EMPPRIN
      SET EMPPRIN. CALENDARIO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPPRIN. CALENDARIO = DELETED. CLAVE

      UPDATE Supervisor_giro.DIASINHA
      SET DIASINHA. CLAVE = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE DIASINHA. CLAVE = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN PUESTO

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'PUESTO_DELETE' 
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. PUESTO_DELETE
GO

CREATE TRIGGER PUESTO_DELETE
ON Supervisor_giro.PUESTO
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPPUES S, DELETED T
       WHERE S. CATALOGO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'PUESTO_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. PUESTO_UPDATE
GO

CREATE TRIGGER PUESTO_UPDATE
ON Supervisor_giro.PUESTO
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPPUES
      SET EMPPUES. CATALOGO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPPUES. CATALOGO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN FALTA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'FALTA_DELETE' 
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. FALTA_DELETE
GO

CREATE TRIGGER FALTA_DELETE
ON Supervisor_giro.FALTA
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPAUS S, DELETED T
       WHERE S. TIPO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'FALTA_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. FALTA_UPDATE
GO

CREATE TRIGGER FALTA_UPDATE
ON Supervisor_giro.FALTA
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPAUS
      SET EMPAUS. TIPO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPAUS. TIPO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN BAJA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'BAJA_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. BAJA_DELETE
GO

CREATE TRIGGER BAJA_DELETE
ON Supervisor_giro.BAJA
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPSDO S, DELETED T
       WHERE S. CAUSA_BAJA = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'BAJA_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. BAJA_UPDATE
GO

CREATE TRIGGER BAJA_UPDATE
ON Supervisor_giro.BAJA
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPSDO
      SET EMPSDO. CAUSA_BAJA = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPSDO. CAUSA_BAJA = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN TURNO1

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'TURNO1_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. TURNO1_DELETE
GO

CREATE TRIGGER TURNO1_DELETE
ON Supervisor_giro.TURNO1
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPPRIN S, DELETED T
       WHERE S. TURNO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'TURNO1_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. TURNO1_UPDATE
GO

CREATE TRIGGER TURNO1_UPDATE
ON Supervisor_giro.TURNO1
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPPRIN
      SET EMPPRIN. TURNO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPPRIN. TURNO = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN TIPO NOMINA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'TIPONOM_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. TIPONOM_DELETE
GO

CREATE TRIGGER TIPONOM_DELETE
ON Supervisor_giro.TIPONOM
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.PERIODO P, DELETED T
       WHERE P. TIPONOM = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPPRIN P, DELETED T
       WHERE P. TIPO_NOM = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'TIPONOM_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. TIPONOM_UPDATE
GO

CREATE TRIGGER TIPONOM_UPDATE
ON Supervisor_giro.TIPONOM
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      RAISERROR ( 'NO ES POSIBLE MODIFICAR ESTE REGISTRO.', 10, 1 )
      ROLLBACK TRANSACTION
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN ESCOLAR

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'ESCOLAR_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. ESCOLAR_DELETE
GO

CREATE TRIGGER ESCOLAR_DELETE
ON Supervisor_giro.ESCOLAR
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPRH S, DELETED T
       WHERE S. ESCOLARIDAD = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'ESCOLAR_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. ESCOLAR_UPDATE
GO

CREATE TRIGGER ESCOLAR_UPDATE
ON Supervisor_giro.ESCOLAR
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPRH
      SET EMPRH. ESCOLARIDAD = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPRH. ESCOLARIDAD = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN IDIOMA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'IDIOMA_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. IDIOMA_DELETE
GO

CREATE TRIGGER IDIOMA_DELETE
ON Supervisor_giro.IDIOMA
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPIDIOM S, DELETED T
       WHERE S. IDIOMA = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'IDIOMA_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. IDIOMA_UPDATE
GO

CREATE TRIGGER IDIOMA_UPDATE
ON Supervisor_giro.IDIOMA
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPIDIOM
      SET EMPIDIOM. IDIOMA = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPIDIOM. IDIOMA = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN INSTRUCTOR

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'INSTRUCT_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. INSTRUCT_DELETE
GO

CREATE TRIGGER INSTRUCT_DELETE
ON Supervisor_giro.INSTRUCT
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.CURSOPRO S, DELETED T
       WHERE S. INSTRUCTOR = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'INSTRUCT_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. INSTRUCT_UPDATE
GO

CREATE TRIGGER INSTRUCT_UPDATE
ON Supervisor_giro.INSTRUCT
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.CURSOPRO
      SET CURSOPRO. INSTRUCTOR = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE CURSOPRO. INSTRUCTOR = DELETED. CLAVE
  END
GO

-- TRIGER PARA PREVENIR EL BORRADO EN NOTA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'NOTA_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. NOTA_DELETE
GO

CREATE TRIGGER NOTA_DELETE
ON Supervisor_giro.NOTA
FOR DELETE
AS
  IF ( SELECT COUNT(*)
       FROM Supervisor_giro.EMPNOTA S, DELETED T
       WHERE S. TIPO = T. CLAVE ) > 0
    BEGIN
      RAISERROR ( 'NO ES POSIBLE BORRAR EL REGISTRO AUN HAY REGISTROS RELACIONADOS.', 10, 1 )
      ROLLBACK TRANSACTION
    END
GO

-- TRIGER PARA ACUALIZAR EN CASCADA

IF EXISTS (SELECT name 
	   FROM   sysobjects 
	   WHERE  name = 'NOTA_UPDATE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. NOTA_UPDATE
GO

CREATE TRIGGER NOTA_UPDATE
ON Supervisor_giro.NOTA
FOR UPDATE
AS
  IF UPDATE( CLAVE )
  BEGIN
      UPDATE Supervisor_giro.EMPNOTA
      SET EMPNOTA. TIPO = INSERTED. CLAVE
      FROM INSERTED, DELETED
      WHERE EMPNOTA. TIPO = DELETED. CLAVE
  END
GO

-- TRIGER PARA BORRAR EN CASCADA

IF EXISTS (SELECT name
	   FROM   sysobjects
	   WHERE  name = 'EMPPRIN_DELETE'
	   AND 	  type = 'TR')
    DROP TRIGGER Supervisor_giro. EMPPRIN_DELETE
GO

CREATE TRIGGER EMPPRIN_DELETE
ON Supervisor_giro.EMPPRIN
FOR DELETE
AS
  IF EXISTS (SELECT name
	     FROM   sysobjects
	     WHERE  name = 'EMPACUM' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPACUM
     FROM DELETED
     WHERE EMPACUM. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name
	     FROM   sysobjects
	     WHERE  name = 'EMPAUS' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPAUS
     FROM DELETED
     WHERE EMPAUS. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name
	     FROM   sysobjects
	     WHERE  name = 'EMPCAPAC' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPCAPAC
     FROM DELETED
     WHERE EMPCAPAC. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPCOME' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPCOME
     FROM DELETED
     WHERE EMPCOME. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPCONT' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPCONT
     FROM DELETED
     WHERE EMPCONT. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPCURSO' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPCURSO
     FROM DELETED
     WHERE EMPCURSO. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPDEP' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPDEP
     FROM DELETED
     WHERE EMPDEP. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPENT' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPENT
     FROM DELETED
     WHERE EMPENT. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPEXT' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPEXT
     FROM DELETED
     WHERE EMPEXT. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPFAM' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPFAM
     FROM DELETED
     WHERE EMPFAM. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPHE' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPHE
     FROM DELETED
     WHERE EMPHE. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPIDIOM' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPIDIOM
     FROM DELETED
     WHERE EMPIDIOM. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPINC' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPINC
     FROM DELETED
     WHERE EMPINC. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPMEN' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPMEN
     FROM DELETED
     WHERE EMPMEN. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPNOTA' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPNOTA
     FROM DELETED
     WHERE EMPNOTA. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPPRES' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPPRES
     FROM DELETED
     WHERE EMPPRES. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPPUES' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPPUES
     FROM DELETED
     WHERE EMPPUES. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPRELO2' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPRELO2
     FROM DELETED
     WHERE EMPRELO2. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPRELOJ' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPRELOJ
     FROM DELETED
     WHERE EMPRELOJ. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPRET' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPRET
     FROM DELETED
     WHERE EMPRET. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPRH' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPRH
     FROM DELETED
     WHERE EMPRH. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPSDO' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPSDO
     FROM DELETED
     WHERE EMPSDO. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPSUC' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPSUC
     FROM DELETED
     WHERE EMPSUC. CLAVE = DELETED. CLAVE

  IF EXISTS (SELECT name 
	     FROM   sysobjects 
	     WHERE  name = 'EMPVACA' AND type = 'U')
     DELETE FROM Supervisor_giro.EMPVACA
     FROM DELETED
     WHERE EMPVACA. CLAVE = DELETED. CLAVE

GO
